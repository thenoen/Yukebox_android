apply plugin: 'com.android.application'
apply plugin: 'jsonschema2pojo'

buildscript {
	repositories {
		jcenter()
		mavenLocal()
	}
	dependencies {
		classpath 'org.jsonschema2pojo:jsonschema2pojo-gradle-plugin:latest.integration'
	}
}

android {
	compileSdkVersion 25
	buildToolsVersion '26.0.2'
	defaultConfig {
		applicationId "sk.thenoen.yukebox"
		minSdkVersion 22
		targetSdkVersion 23
		versionCode 1
		versionName "1.0"
		testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
		multiDexEnabled true
	}
	buildTypes {
		release {
			minifyEnabled false
			proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
		}
	}
	compileOptions {
		sourceCompatibility JavaVersion.VERSION_1_8
		targetCompatibility JavaVersion.VERSION_1_8
	}
}

dependencies {
	implementation fileTree(include: ['*.jar'], dir: 'libs')
	androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2', {
		exclude group: 'com.android.support', module: 'support-annotations'
	})
	implementation 'com.android.support:appcompat-v7:25.3.0'
	implementation 'com.android.support:design:25.3.0'
	implementation 'com.google.apis:google-api-services-youtube:v3-rev182-1.22.0'
	testImplementation 'junit:junit:4.12'
	implementation 'com.google.code.findbugs:jsr305:3.0.1'
	implementation 'org.nanohttpd:nanohttpd:2.3.1'
	implementation 'org.nanohttpd:nanohttpd-webserver:2.3.1'
	implementation 'org.nanohttpd:nanohttpd-nanolets:2.3.1'
	implementation 'commons-io:commons-io:2.4'
	// Required for @Generated annotation
	implementation 'org.glassfish:javax.annotation:10.0-b28'
	// Required if generating Gson annotations
	implementation 'com.google.code.gson:gson:2.8.0'
	// Required if generating Moshi 1.x annotations
	implementation 'com.squareup.moshi:moshi:1.5.0'
	// Required if generating equals, hashCode, or toString methods
	implementation 'commons-lang:commons-lang:2.6'
	// Required if generating JSR-303 annotations
	implementation 'javax.validation:validation-api:1.1.0.CR2'
	// Required if generating Jackson 2 annotations
	implementation 'com.fasterxml.jackson.core:jackson-databind:2.9.1'


	// Room persistence
	implementation "android.arch.persistence.room:runtime:1.0.0"
	annotationProcessor "android.arch.persistence.room:compiler:1.0.0"
	testImplementation "android.arch.persistence.room:testing:1.0.0"
	implementation "android.arch.persistence.room:rxjava2:1.0.0"

	// LiveData and ViewModel
	implementation "android.arch.lifecycle:extensions:1.0.0"
	implementation "android.arch.lifecycle:reactivestreams:1.0.0"
	testImplementation "android.arch.core:core-testing:1.0.0"

	// Dagger2
	compile 'com.google.dagger:dagger:2.14.1'
	annotationProcessor 'com.google.dagger:dagger-compiler:2.14.1'
	compile 'com.google.dagger:dagger-android:2.14.1'
	compile 'com.google.dagger:dagger-android-support:2.14.1' // if you use the support libraries
	annotationProcessor 'com.google.dagger:dagger-android-processor:2.14.1'
}

// this is configuration for generating of POJO classes from json-schema
// Each configuration is set to the default value
jsonSchema2Pojo {
	// Whether to generate builder-style methods of the form withXxx(value) (that return this),
	// alongside the standard, void-return setters.
	generateBuilders = false

	// Whether to use primitives (long, double, boolean) instead of wrapper types where possible
	// when generating bean properties (has the side-effect of making those properties non-null).
	usePrimitives = false

	// Location of the JSON Schema file(s). This may refer to a single file or a directory of files.
	source = files("../yukebox-client/domain-model/schemas")

	// Target directory for generated Java source files. The plugin will add this directory to the
	// java source set so the compiler will find and compile the newly generated source files.
//	targetDirectory = file("${project.buildDir}/generated-sources/js2p")
	targetDirectory = file("../yukebox-client/domain-model/generated")

	// Package name used for generated Java classes (for types where a fully qualified name has not
	// been supplied in the schema using the 'javaType' property).
	targetPackage = 'sk.thenoen.yukebox.domain'

	// The characters that should be considered as word delimiters when creating Java Bean property
	// names from JSON property names. If blank or not set, JSON properties will be considered to
	// contain a single word when creating Java Bean property names.
	propertyWordDelimiters = [] as char[]

	// Whether to use the java type long (or Long) instead of int (or Integer) when representing the
	// JSON Schema type 'integer'.
	useLongIntegers = false

	// Whether to use the java type BigInteger when representing the JSON Schema type 'integer'. Note
	// that this configuration overrides useLongIntegers
	useBigIntegers = false

	// Whether to use the java type double (or Double) instead of float (or Float) when representing
	// the JSON Schema type 'number'.
	useDoubleNumbers = true

	// Whether to use the java type BigDecimal when representing the JSON Schema type 'number'. Note
	// that this configuration overrides useDoubleNumbers
	useBigDecimals = false

	// Whether to include hashCode and equals methods in generated Java types.
	includeHashcodeAndEquals = true

	// Whether to include a toString method in generated Java types.
	includeToString = true

	// The style of annotations to use in the generated Java types. Supported values:
	//  - jackson (alias of jackson2)
	//  - jackson2 (apply annotations from the Jackson 2.x library)
	//  - jackson1 (apply annotations from the Jackson 1.x library)
	//  - gson (apply annotations from the Gson library)
	//  - moshi1 (apply annotations from the Moshi 1.x library)
	//  - none (apply no annotations at all)
	annotationStyle = 'jackson'

	// A fully qualified class name, referring to a custom annotator class that implements
	// org.jsonschema2pojo.Annotator and will be used in addition to the one chosen
	// by annotationStyle. If you want to use the custom annotator alone, set annotationStyle to none.
	customAnnotator = 'org.jsonschema2pojo.NoopAnnotator'

	// Whether to include JSR-303/349 annotations (for schema rules like minimum, maximum, etc) in
	// generated Java types. Schema rules and the annotation they produce:
	//  - maximum = @DecimalMax
	//  - minimum = @DecimalMin
	//  - minItems,maxItems = @Size
	//  - minLength,maxLength = @Size
	//  - pattern = @Pattern
	//  - required = @NotNull
	// Any Java fields which are an object or array of objects will be annotated with @Valid to
	// support validation of an entire document tree.
	includeJsr303Annotations = false

	// The type of input documents that will be read. Supported values:
	//  - jsonschema (schema documents, containing formal rules that describe the structure of json data)
	//  - json (documents that represent an example of the kind of json data that the generated Java types
	//          will be mapped to)
	sourceType = 'jsonschema'

	// Whether to empty the target directory before generation occurs, to clear out all source files
	// that have been generated previously. <strong>Be warned</strong>, when activated this option
	// will cause jsonschema2pojo to <strong>indiscriminately delete the entire contents of the target
	// directory (all files and folders)</strong> before it begins generating sources.
	removeOldOutput = true

	// The character encoding that should be used when writing the generated Java source files
	outputEncoding = 'UTF-8'

	// Whether to use {@link org.joda.time.DateTime} instead of {@link java.util.Date} when adding
	// date type fields to generated Java types.
	useJodaDates = false

	// Whether to add JsonFormat annotations when using Jackson 2 that cause format "date" and "date-time"
	// fields to be formatted as yyyy-MM-dd and yyyy-MM-dd'T'HH:mm:ss.SSSZ respectively. To customize these
	// patterns, use customDatePattern and customDateTimePattern config options or add these inside a schema
	// to affect an individual field
	formatDateTimes = true
	formatDates = true

	// Whether to use commons-lang 3.x imports instead of commons-lang 2.x imports when adding equals,
	// hashCode and toString methods.
	useCommonsLang3 = false

	// Whether to initialize Set and List fields as empty collections, or leave them as null.
	initializeCollections = true

	// Whether to add a prefix to generated classes.
	classNamePrefix = ""

	// Whether to add a suffix to generated classes.
	classNameSuffix = ""

	// An array of strings that should be considered as file extensions and therefore not included in class names.
	fileExtensions = [] as String[]

	// Whether to generate constructors or not.
	includeConstructors = false

	// **EXPERIMENTAL** Whether to make the generated types Parcelable for Android
	parcelable = false

	// Whether to make the generated types Serializable
	serializable = false

	// Whether to include getters/setters or to omit these accessor methods and create public fields instead.
	includeAccessors = true

	// Whether to include dynamic getters, setters, and builders or to omit these methods.
	includeDynamicAccessors = false
}
